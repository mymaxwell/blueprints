blueprint:
  name: Camera Recording and Notify / 摄像头或门铃录像并通知
  description: |
    ### 🎦 使用指南:
    1. **添加保存录像脚本**  
      在 `configuration.yaml` 中添加以下内容（注意转义单引号）：
      {% raw %}
      ```yaml
      shell_command:
        save_xiaomi_video: |
          bash -c '
            mp4="{{ name|default(''latest'') }}.mp4"
            dir="{{ dir|default(''/media/camera'', true) }}"
            mkdir -p "$dir" && cd "$dir"
            script="/config/custom_components/xiaomi_miot/scripts/save_xiaomi_video.sh"
            if [ -f "$script" ]; then
              bash "$script" "{{ url }}" "$mp4"
            else
              ffmpeg -y -i "{{ url }}" -c copy "$mp4"
            fi
            ls *.mp4 | sort | head -n -{{ keep|default(100) }} | xargs rm -vf
            if [ -n "{{ img }}" ]; then
              curl -o "{{ name|default(''latest'') }}.jpg" "{{ img }}"
              ls *.jpg | sort | head -n -{{ keep|default(100) }} | xargs rm -vf
            fi
          '
      ```
      {% endraw %}
    2. **重启 Home Assistant**

  domain: automation
  input:
    camera:
      name: Camera or Doorbell
      description: 通过 Xiaomi Miot 集成的摄像机或门铃实体
      selector:
        entity:
          domain: camera
          integration: xiaomi_miot

    mihome_notify:
      name: Mihome message entity
      description: 米家消息实体（用于减小延迟），例如 `sensor.mi_xxxx_message`
      selector:
        entity:
          domain: sensor
          integration: xiaomi_miot

    mihome_notify_kwd:
      name: Camera name in mihome
      description: 摄像机在米家中的名称（关键词）
      selector:
        text:
      default: ''

    notify_action:
      name: Notify action
      description: |
        通知动作
        ```yaml
        action: notify.mobile_app_your_iphone
        data:
          title: '{{ home_name }}{{ camera_device_name }}'
          message: '{{ event }} 🔋{{ battery }}%'
          data:
            video: '{{ mp4_path }}'
            image: '{{ img_path }}'
            url: /config/devices/device/{{ camera_device_id }}
            actions:
              - action: URI
                title: 打开米家
                uri: '{{ app_link }}'
              - action: none
                title: 我知道了
            push:
              tag: '{{ camera_entity_id }}'
        ```
      selector:
        action:
      default: ''

    save_dir:
      name: Save dir
      description: 保存路径（默认 `/media/camera`）
      default: ''

    keep_num:
      name: The number of recorded videos to retain
      description: 保留录像数量
      default: 100
      selector:
        number:
          min: 1
          max: 2000
          mode: slider

    external_url:
      name: External url
      description: 外部访问地址（例如 `https://your.hass.domain:8123`）
      default: ''

    video_events:
      name: Video event mapping
      description: 视频事件映射（JSON 格式）
      selector:
        object:
      default:
        ObjectMotion: 画面变动
        Pass: 有人在门前经过
        PassBell: 有人按门铃
        PassStay: 有人在门前停留

mode: queued
triggers:
  - platform: state
    entity_id: !input camera
    attribute: motion_video_time
    id: new_video
  - platform: state
    entity_id: !input mihome_notify
    id: mihome_notify

variables:
  camera_entity_id: !input camera
  camera_device_id: "{{ device_id(camera_entity_id) }}"
  camera_device_name: "{{ device_attr(camera_device_id, 'name') }}"
  camera_info_id: "{{ device_entities(camera_device_id) | select('match', 'button.+_info') | join }}"
  camera_battery_id: "{{ device_entities(camera_device_id) | select('match', 'sensor.*_battery') | join }}"
  mihome_notify_kwd: !input mihome_notify_kwd
  mihome_notify_name: "{{ mihome_notify_kwd or camera_device_name }}"
  save_dir: !input save_dir
  save_url: "{{ save_dir | replace('/media/', '/media/local/') | replace('/config/www', '/local') }}"
  notify_action: !input notify_action
  video_events: !input video_events
  external_url: !input external_url

actions:
  - choose:
      - conditions:
          - condition: trigger
            id: mihome_notify
          - condition: template
            value_template: "{{ mihome_notify_name in trigger.to_state.state }}"
        sequence:
          - action: homeassistant.update_entity
            target:
              entity_id: "{{ camera_entity_id }}"

      - conditions:
          - condition: trigger
            id: new_video
        sequence:
          - variables:
              stream_url: "{{ state_attr(camera_entity_id, 'stream_address') }}"
              motion_video_time: >-
                {{ state_attr(camera_entity_id, 'motion_video_time') | regex_replace('[\s:+-]', '') }}
              motion_video_type: >-
                {{ state_attr(camera_entity_id, 'motion_video_type') | regex_replace('[\s:+-]', '') }}
              mp4_name: "{{ motion_video_time }}-{{ motion_video_type }}"
              mp4_path: "{{ save_url }}/{{ mp4_name }}.mp4"
              img_path: "{{ (external_url ~ state_attr(camera_entity_id, 'entity_picture')) if external_url else '' }}"
              battery: "{{ states(camera_battery_id) | int(0) if camera_battery_id else '' }}"
              event: "{{ (video_events or {}).get(motion_video_type, motion_video_type) }}"
              app_link: "{{ state_attr(camera_info_id, 'app_link') }}"
              home_room: "{{ state_attr(camera_info_id, 'home_room') }}"
              home_name: "{{ (home_room | default('')).split()[0] }}"
          - action: shell_command.save_xiaomi_video
            data:
              name: "{{ mp4_name }}"
              dir: "{{ save_dir }}"
              img: "{{ img_path }}"
              url: "{{ stream_url }}"
              keep: !input keep_num
            response_variable: action_result
          - sequence: !input notify_action
